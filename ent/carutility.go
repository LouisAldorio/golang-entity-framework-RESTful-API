// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"myapp/ent/carutility"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CarUtility is the model entity for the CarUtility schema.
type CarUtility struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarUtilityQuery when eager-loading is set.
	Edges CarUtilityEdges `json:"edges"`
}

// CarUtilityEdges holds the relations/edges for other nodes in the graph.
type CarUtilityEdges struct {
	// Cars holds the value of the cars edge.
	Cars []*Car `json:"cars,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CarsOrErr returns the Cars value or an error if the edge
// was not loaded in eager-loading.
func (e CarUtilityEdges) CarsOrErr() ([]*Car, error) {
	if e.loadedTypes[0] {
		return e.Cars, nil
	}
	return nil, &NotLoadedError{edge: "cars"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarUtility) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case carutility.FieldID:
			values[i] = new(sql.NullInt64)
		case carutility.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CarUtility", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarUtility fields.
func (cu *CarUtility) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carutility.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cu.ID = int(value.Int64)
		case carutility.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cu.Name = value.String
			}
		}
	}
	return nil
}

// QueryCars queries the "cars" edge of the CarUtility entity.
func (cu *CarUtility) QueryCars() *CarQuery {
	return (&CarUtilityClient{config: cu.config}).QueryCars(cu)
}

// Update returns a builder for updating this CarUtility.
// Note that you need to call CarUtility.Unwrap() before calling this method if this CarUtility
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *CarUtility) Update() *CarUtilityUpdateOne {
	return (&CarUtilityClient{config: cu.config}).UpdateOne(cu)
}

// Unwrap unwraps the CarUtility entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *CarUtility) Unwrap() *CarUtility {
	tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarUtility is not a transactional entity")
	}
	cu.config.driver = tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *CarUtility) String() string {
	var builder strings.Builder
	builder.WriteString("CarUtility(")
	builder.WriteString(fmt.Sprintf("id=%v", cu.ID))
	builder.WriteString(", name=")
	builder.WriteString(cu.Name)
	builder.WriteByte(')')
	return builder.String()
}

// CarUtilities is a parsable slice of CarUtility.
type CarUtilities []*CarUtility

func (cu CarUtilities) config(cfg config) {
	for _i := range cu {
		cu[_i].config = cfg
	}
}
