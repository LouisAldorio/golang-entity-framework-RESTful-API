// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"myapp/ent/car"
	"myapp/ent/carutility"
	"myapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarUtilityUpdate is the builder for updating CarUtility entities.
type CarUtilityUpdate struct {
	config
	hooks    []Hook
	mutation *CarUtilityMutation
}

// Where appends a list predicates to the CarUtilityUpdate builder.
func (cuu *CarUtilityUpdate) Where(ps ...predicate.CarUtility) *CarUtilityUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetName sets the "name" field.
func (cuu *CarUtilityUpdate) SetName(s string) *CarUtilityUpdate {
	cuu.mutation.SetName(s)
	return cuu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuu *CarUtilityUpdate) SetNillableName(s *string) *CarUtilityUpdate {
	if s != nil {
		cuu.SetName(*s)
	}
	return cuu
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (cuu *CarUtilityUpdate) AddCarIDs(ids ...int) *CarUtilityUpdate {
	cuu.mutation.AddCarIDs(ids...)
	return cuu
}

// AddCars adds the "cars" edges to the Car entity.
func (cuu *CarUtilityUpdate) AddCars(c ...*Car) *CarUtilityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuu.AddCarIDs(ids...)
}

// Mutation returns the CarUtilityMutation object of the builder.
func (cuu *CarUtilityUpdate) Mutation() *CarUtilityMutation {
	return cuu.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (cuu *CarUtilityUpdate) ClearCars() *CarUtilityUpdate {
	cuu.mutation.ClearCars()
	return cuu
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (cuu *CarUtilityUpdate) RemoveCarIDs(ids ...int) *CarUtilityUpdate {
	cuu.mutation.RemoveCarIDs(ids...)
	return cuu
}

// RemoveCars removes "cars" edges to Car entities.
func (cuu *CarUtilityUpdate) RemoveCars(c ...*Car) *CarUtilityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuu.RemoveCarIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *CarUtilityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cuu.hooks) == 0 {
		affected, err = cuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarUtilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuu.mutation = mutation
			affected, err = cuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cuu.hooks) - 1; i >= 0; i-- {
			if cuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *CarUtilityUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *CarUtilityUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *CarUtilityUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuu *CarUtilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carutility.Table,
			Columns: carutility.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carutility.FieldID,
			},
		},
	}
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carutility.FieldName,
		})
	}
	if cuu.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carutility.CarsTable,
			Columns: carutility.CarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.RemovedCarsIDs(); len(nodes) > 0 && !cuu.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carutility.CarsTable,
			Columns: carutility.CarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carutility.CarsTable,
			Columns: carutility.CarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carutility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CarUtilityUpdateOne is the builder for updating a single CarUtility entity.
type CarUtilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarUtilityMutation
}

// SetName sets the "name" field.
func (cuuo *CarUtilityUpdateOne) SetName(s string) *CarUtilityUpdateOne {
	cuuo.mutation.SetName(s)
	return cuuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuuo *CarUtilityUpdateOne) SetNillableName(s *string) *CarUtilityUpdateOne {
	if s != nil {
		cuuo.SetName(*s)
	}
	return cuuo
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (cuuo *CarUtilityUpdateOne) AddCarIDs(ids ...int) *CarUtilityUpdateOne {
	cuuo.mutation.AddCarIDs(ids...)
	return cuuo
}

// AddCars adds the "cars" edges to the Car entity.
func (cuuo *CarUtilityUpdateOne) AddCars(c ...*Car) *CarUtilityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuuo.AddCarIDs(ids...)
}

// Mutation returns the CarUtilityMutation object of the builder.
func (cuuo *CarUtilityUpdateOne) Mutation() *CarUtilityMutation {
	return cuuo.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (cuuo *CarUtilityUpdateOne) ClearCars() *CarUtilityUpdateOne {
	cuuo.mutation.ClearCars()
	return cuuo
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (cuuo *CarUtilityUpdateOne) RemoveCarIDs(ids ...int) *CarUtilityUpdateOne {
	cuuo.mutation.RemoveCarIDs(ids...)
	return cuuo
}

// RemoveCars removes "cars" edges to Car entities.
func (cuuo *CarUtilityUpdateOne) RemoveCars(c ...*Car) *CarUtilityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuuo.RemoveCarIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *CarUtilityUpdateOne) Select(field string, fields ...string) *CarUtilityUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated CarUtility entity.
func (cuuo *CarUtilityUpdateOne) Save(ctx context.Context) (*CarUtility, error) {
	var (
		err  error
		node *CarUtility
	)
	if len(cuuo.hooks) == 0 {
		node, err = cuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarUtilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuuo.mutation = mutation
			node, err = cuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuuo.hooks) - 1; i >= 0; i-- {
			if cuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *CarUtilityUpdateOne) SaveX(ctx context.Context) *CarUtility {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *CarUtilityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *CarUtilityUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuuo *CarUtilityUpdateOne) sqlSave(ctx context.Context) (_node *CarUtility, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carutility.Table,
			Columns: carutility.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carutility.FieldID,
			},
		},
	}
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CarUtility.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carutility.FieldID)
		for _, f := range fields {
			if !carutility.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carutility.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carutility.FieldName,
		})
	}
	if cuuo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carutility.CarsTable,
			Columns: carutility.CarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.RemovedCarsIDs(); len(nodes) > 0 && !cuuo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carutility.CarsTable,
			Columns: carutility.CarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carutility.CarsTable,
			Columns: carutility.CarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarUtility{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carutility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
